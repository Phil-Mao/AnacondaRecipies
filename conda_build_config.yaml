# This differs from target_platform in that it determines what subdir the compiler
#    will target, not what subdir the compiler package will be itself.
#    For example, we need a win-64 vs2008_win-32 package, so that we compile win-32
#    code on win-64 miniconda.
cross_compiler_target_platform:  # [win]
  - win-64                     # [win]
c_compiler:
  # legacy compilers for things that refuse to move
  # modern compilers
  - gcc                        # [linux64]
  - vs2017                     # [win]
  - clang                      # [osx]
c_compiler_version:            # [unix]
  - 7                          # [linux64]
  - 4                          # [osx]
cxx_compiler:
  # modern compilers
  - gxx                        # [linux64]
  - clangxx                    # [osx]
  - vs2017                     # [win]
cxx_compiler_version:          # [unix]
  - 7                          # [linux64]
  - 4                          # [osx]
fortran_compiler:              # [unix or win64]
  - gfortran                   # [(linux64 or osx)]
  - flang                      # [win64]
fortran_compiler_version:      # [unix or win64]
  - 7                          # [linux64]
  - 5                          # [win64]
  - 4                          # [osx]

macos_min_version:             # [osx]
  - 10.9                       # [osx]
MACOSX_DEPLOYMENT_TARGET:      # [osx]
  - 10.9                       # [osx]
CONDA_BUILD_SYSROOT:           # [osx]
  - /opt/MacOSX10.9.sdk        # [osx]

build:
  skip: true # [win32]

# dual build configuration
channel_sources:
  - conda-forge,defaults                        # [not aarch64]

channel_targets:
  - conda-forge main

extend_keys:
  - extend_keys
  - ignore_build_only_deps
  - ignore_version
  - pin_run_as_build

ignore_build_only_deps:
  - numpy
  - python

libblas: 3.8 *netlib
libcblas: 3.8 *netlib
liblapack: 3.8.0 *netlib
liblapacke: 3.8.0 *netlib
python: 3.8.* *_cpython

vs2017_win_64:
  - 19.15.26726 h3c6f0ee_0  # [win-64]

